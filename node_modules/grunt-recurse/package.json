{
  "name": "grunt-recurse",
  "version": "0.2.1",
  "description": "Helpers to load and use recursive Gruntfiles.",
  "main": "./src/lib/recurse.coffee",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:DavidSouther/grunt-recurse.git"
  },
  "keywords": [
    "grunt",
    "recurse",
    "submodule",
    "subtasks"
  ],
  "author": {
    "name": "David Souther"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DavidSouther/grunt-recurse/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-release": "~0.6.0"
  },
  "peerDependencies": {
    "load-grunt-tasks": "~0.2.0"
  },
  "readme": "# grunt-recurse\n\nRecursively load subproject Grunt files. Load all `grunt-*` modules saved in\n`package.json`'s dependency lists. All you need to do is define config options\nand register your own tasks.\n\n## Basic Usage\n\nIn a Gruntfile in the root of your project, require `grunt-recurse` and tell it\nto load subprojects. Register any default tasks and configurations. Finalize\nthe grunt configuration.\n\n```javascript\n// ./Gruntfile.js\n\nmodule.exports = function(grunt){\n\n    // Use grunt-recurse on the module. Pass the __dirname to ensure pathing.\n    require('grunt-recurse')(grunt, __dirname);\n    [\n        './src/client',\n        './src/server'\n    ].each(function(subproject){\n        grunt.grunt(subproject);\n    });\n\n    // Prepare any multiconfigs.\n    grunt.Config = {\n        jshint: {\n            files: ['./src/**/*.js'],\n            options: {\n                jshintrc: './.jshintrc'\n            }\n        }\n    };\n\n    // Register tasks like normal.\n    grunt.registerTask(\n        'default', \n        'Perform full build and test of the entire project.'\n        [ 'jshint', 'client', 'server' ]\n    );\n\n    // Call finalize to push grunt.Config into initConfg, and other things.\n    grunt.finalize();\n};\n```\n\nIn the Gruntfiles of each subproject, assign config setting to `grunt.Config`.\nFile paths will still be relative to the root Gruntfile.\n\n```javascript\n// ./src/client/Gruntfile.js\nmodule.exports = function(grunt){\n    grunt.Config = {\n        copy: {\n            client: {\n                files: [ {\n                    expand: true,\n                    src: ['./src/client/**'],\n                    dest: './build/client'\n                } ]\n            }\n        }\n    };\n\n    grunt.registerTask(\n        'client',\n        'Perform all tasks necessary to build the client.'\n        ['copy:client']\n    );\n};\n```\n\n## Automagic\n\n`grunt-recurse` uses `sindresorhus/load-grunt-tasks` to mitigate need for\n`grunt.loadNpmTasks` or `grunt.NpmTasks = []`. `package.json` settings are\nloaded into `grunt.pkg`.\n\n## Conventions\n\nThere are no enforcements on task naming or configuration settings. Grunt will\napply whatever change got made last during the run. Thus, `grunt.registerTask`\nwith the same name in both the core Gruntfile and the submodule Gruntfile\nwill conflict, and (using the above code layout) the core Gruntfile's definition\nwill be used.\n\nFor this reason, I recommend the convention of each submodule Gruntfile\nregistering a task with the name of the submodule's folder, and namespacing\nthe registered tasks within the submodule as camel-case or hyphen-seperated\nusing the submodule's folder name. This is just a convention, and you are free\nto use whatever mechanism necessary to ensure the tasks names do not collide.\n\nThe config object is merged at the task level. Using, eg, `grunt-contrib-copy`\nacross several modules, if each target is given a seperate name, they will live\nharmoniously. Otherwise, the last defined target options will override any prior \ndefinitions.\n\n## Changelog\n\n### 0.2.1 on 2013-12-22\n - No longer warns that grunt-recurse isn't a loadable grunt task.\n\n### 0.2.0 on 2013-11-17\n - `load-grunt-tasks` to load all npm tasks saved in package.json\n - Remove coffee-script dependency.\n - Automatically finalize Grunt configuration.\n - Updated documentation.\n\n### 0.1.0 on 2013-10-29\n - `grunt.grunt` to load submodule grunt files.\n - `grunt.Config = {configobject}` to set task config properties.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/DavidSouther/grunt-recurse",
  "_id": "grunt-recurse@0.2.1",
  "_shasum": "15e6a738552218aa855875e226aedbfddc2ee842",
  "_from": "grunt-recurse@~0.2.0",
  "_resolved": "https://registry.npmjs.org/grunt-recurse/-/grunt-recurse-0.2.1.tgz"
}
